<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mindustry on Simba&#39;s Blog</title>
    <link>https://blog.simbafs.cc/posts/game/mindustry/</link>
    <description>Recent content in Mindustry on Simba&#39;s Blog</description>
    <image>
      <url>https://blog.simbafs.cc/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.simbafs.cc/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 22 May 2022 23:06:02 +0800</lastBuildDate><atom:link href="https://blog.simbafs.cc/posts/game/mindustry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>兩輸入生產單位的比較</title>
      <link>https://blog.simbafs.cc/posts/game/mindustry/two-input-compare/</link>
      <pubDate>Sun, 22 May 2022 23:06:02 +0800</pubDate>
      
      <guid>https://blog.simbafs.cc/posts/game/mindustry/two-input-compare/</guid>
      <description>目的 驗證不同設計的生產效率差異 用科學的方式檢驗下面這些毫無根據、隨意編造的偏見 實驗方法 相同的物品源、相同的生產建築數量、相同的輸出軌數和時間，以不同的輸入方法配置，計算每秒生產量。
相同物品源：就一樣數量的物品源，本次實驗用兩組實驗，所以是四個沙、兩個煤 相同生產建築：八個煉矽廠 相同輸出軌數：各兩條 相同輸出時間：連接到同一個能量源，計時一段時間後拆除能量源，計算雙方生產數量 因為輸送帶用的是最低階，可能會補給不足或是消化不夠快，但是因為兩個都是相同的限制（輸出軌數），要卡一定是兩個一起卡，頂多被卡成平手。這個時候如果還輸，那就不知道是誰的問題了喔！
原始數據和計算結果 秒數 A B 10 10.8 11.0 20 9.6 10.9 30 9.2 9.7 40 9.1 9.6 50 9.0 9.5 60 8.9 9.2 平均 9.4 10.0 結果與討論 在時間拉長後，因為被卡住的東西被平均掉，因此兩個都生產效率都下降，這個很正常
根據結果，即便都被限制，生產效率都還是 B 配置比較高，無論時間拉多長。
根據我個人的猜測，B 因為輸入和輸出沒有混雜在一起，因此不會造成堵塞（仔細觀察 A，最後在反向分類器那邊常常會堵住，這就是輸入輸出混雜的後果），導致即使輸入比例不對，效率依舊比較高。
A 的穩定性高了那麼一點點，不重要
結果比較 根據可擴張性而言，B 的設計是可以橫向無限擴張，不像 A，縱向擴張受到輸送帶效率影響、橫向擴張受到輸入比須滿管影響（不滿管比例就不對，這個設計也就跟垃圾一樣毫無意義，因此必須滿管）。另外，一套 B 可以有比 A 更彈性的輸入和輸出輸送帶數量，因此可以適應更多的狀況。
B 唯一的缺點是佔體積大了一點點，但我個人認為，沒有任何事物是完美的，因此用一點點小缺點換取最多的優點，這個是比追求無謂的小體積來的更重要。
更重要的是，B 的設計更為簡單，建造成本低、可以無限擴張
後續實驗 根據 Magicaltank 和 a0000778 的建議，換成溢流器的確會增加效率，但即使沒換，但還是比 A 設計效率高。</description>
    </item>
    
    <item>
      <title>砲台自動瞄準</title>
      <link>https://blog.simbafs.cc/posts/game/mindustry/turretautoaim/</link>
      <pubDate>Wed, 18 May 2022 16:29:13 +0800</pubDate>
      
      <guid>https://blog.simbafs.cc/posts/game/mindustry/turretautoaim/</guid>
      <description>用處理器可以控制砲台們打的方向和什麼時候打，這樣只要有一群受控的砲台，就可以在射程範圍內指哪打哪
單一砲台 如圖所示，砲台跟著玩家瞄準的方向打
以下是程式碼
radar player any any distance duo1 1 player sensor x player @shootX sensor y player @shootY sensor shoot player @shooting control shoot duo1 x y shoot 0 command description radar 取得玩家物件 sensor 抽出玩家物件的 shootX、shootY（瞄準的點）和 shooting（是否正在開火） control 控制 duo1 砲台 variable description player 玩家物件 x 瞄準的 X 座標 y 瞄準的 Y 座標 shooting 是否開火 多個砲台 上面的指令只能控制一個砲台，那麼要怎麼控制多個砲台呢？答案是 loop，但是 Mindustry 沒有提供 loop，我們只能用 jump，那麼就來看看程式吧！
set n 0 getlink result n radar player any any distance result 1 player sensor x player @shootX sensor y player @shootY sensor shoot player @shooting control shoot result x y shoot 0 op add n n 1 op mod n n @links jump 1 always x false 以下重複的就不會再多講了</description>
    </item>
    
    <item>
      <title>控制敵方路徑</title>
      <link>https://blog.simbafs.cc/posts/game/mindustry/pathofenemy/</link>
      <pubDate>Tue, 17 May 2022 16:16:27 +0800</pubDate>
      
      <guid>https://blog.simbafs.cc/posts/game/mindustry/pathofenemy/</guid>
      <description>在遊戲中，如何有效的讓資源集中在前線是一門學問，最好的情況當然是所有可能路徑都佈置強大的火力，但真實情況往往不是如此。
當遇到有多個洞口的地圖時，你可能堵好一個洞，敵方就從令一個洞跑進來，然後核心就被攻破了，但是你又沒有足夠的資源和時間在第一時間把所有的洞都佈置火力。這時候你就必須了解的方式如何行動的。
本文提到的敵方都是遊戲電腦 AI，所以比較笨、很好騙，如果是和你的朋友對打，可能就不適用了。
自動找路 尋找路徑可說是電腦科學一個很常見又基本的問題，Mindustry 尋路演算法會考慮預估時間。這個預估時間包括距離、要打破的牆等等，計算出來了之後選擇一條最段時間的路。注意，這裡他不會考慮沿途可能遭受的火力，我們就是要利用他這點來設計。
我的習慣作法 首先，最靠近空降區的洞不一定適合佈置砲台（例如第三關廢墟海岸左上角那個超級小的洞）這些地方可能是腹地狹小或是資源不足，總之你不會想要在這裡放砲台。那就用三層銅牆（不一定要 2x2 的，1x1 也可以）把他堵起來，一層防守兩層緩衝。挑選到適合的地方佈置砲台後，不要堵死，要留一條寬至少 3 格、夠長的通道。這個通道你要確保通暢，可以毫無阻礙的通到你的核心，這樣電腦就會判定這條路毫無阻礙，優先選擇，敵人就不會亂走到你沒有佈防的地方。這樣做還有一個好處，當你可以生產機甲時，友方機甲就可以直接走出去，不會受到阻礙，你也不用幫他們開門。
然後在左右佈滿砲台，記得一定要放修理方塊，這樣你才不用常常來修方塊。至於通道長度和牆壁厚度，取決於這關敵方火力強度和你選用的砲台射程，如果你能夠在對方開火之前就幹掉他們，當然牆壁可以一層意思意思就好。</description>
    </item>
    
    <item>
      <title>Merge</title>
      <link>https://blog.simbafs.cc/posts/game/mindustry/merge/</link>
      <pubDate>Tue, 17 May 2022 08:32:38 +0800</pubDate>
      
      <guid>https://blog.simbafs.cc/posts/game/mindustry/merge/</guid>
      <description>Mindustry 中，某條輸送帶（A）合併到另一條未滿的輸送帶（B）上時，如果 B 有一個足夠小的空隙，A 是有機會無法補滿的
這種情況通常出現在兩列礦機的合併
要解決這個狀況，最簡單的方法是加上一個分配器
當然這裡的輸出是不能被堵住的，不然就沒有意義了(X</description>
    </item>
    
  </channel>
</rss>
